{r install-tidyverse, eval = F}
{r install-tidyverse, eval = F}
install.packages("tidyverse", repos = 'https://cran.us.r-project.org')
{r install-more-packages-2, eval = F}
install.packages(c("XML", "jsonlite", "httr", "rvest"))
dataset = read.csv("Churn_Modellng")
setwd("~/Machine Learning /my_scripts/Part 8 - Deep Learning/Section 39 - Artificial Neural Networks (ANN)")
dataset = read.csv("Churn_Modellng")
dataset = read.csv("Churn_Modellng.csv")
setwd("~/Machine Learning /my_scripts/Part 8 - Deep Learning/Section 39 - Artificial Neural Networks (ANN)")
dataset = read.csv("Churn_Modellng.csv")
dataset = read.csv("Churn_Modelling.csv")
dataset =[4:14]
dataset = [4:14]
dataset = dataset[4:14]
View(dataset)
# Encoding categorical data
dataset$Geography = as_numericfactor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
dataset$Geography = as_numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
install.packages("--")
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
View(dataset)
# Data Preprocessing
# Importing dataset
dataset = read.csv("Churn_Modelling.csv")
dataset = dataset[4:14]
# Encoding categorical data
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
View(dataset)
# Feature scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
# Data Preprocessing
# Importing dataset
dataset = read.csv("Churn_Modelling.csv")
dataset = dataset[4:14]
# Encoding categorical data
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
View(dataset)
View(dataset)
install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
install.packages("caTools")
View(dataset)
library(caTools)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
install.packages('h20')
install.packages("h2o")
library(h20)
install.packages("purrr")
library("h2o", lib.loc="/usr/local/lib/R/3.5/site-library")
h2o.init(nthreads = -1)
# Data Preprocessing
# Importing dataset
dataset = read.csv("Churn_Modelling.csv")
dataset = dataset[4:14]
# Encoding categorical data
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
# Splitting the dataset into Training set and Test Set
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
#Fitting our ANN to the training set
# install.packages("h2o")
library(h20)
h2o.init(nthreads = -1)
classifier=h2o.deeplearning(y = 'Excited',
training_frame = as.h20(training_set),
activation = 'Rectifier',
hidden = c(6, 6),
epochs = 100,
train_samples_per_iteration = -2)
classifier=h2o.deeplearning(y = 'Excited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6, 6),
epochs = 100,
train_samples_per_iteration = -2)
classifier=h2o.deeplearning(y = 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6, 6),
epochs = 100,
train_samples_per_iteration = -2)
prob_pred = predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = ifelse(prob_pred > 0.5, 1, 0)
cm = table(test_set[,-11], y_pred)
prob_pred = predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
cm = table(test_set[,-11], y_pred)
cm = table(test_set[,11], y_pred)
cm
cm
cm = table(test_set[,11], y_pred, dnn=list('No', Yes))
cm = table(test_set[,11], y_pred, dnn=list('No', "Yes"))
cm
view(cm)
show(cm)
table(cm)
cm = ftable(test_set[,11], y_pred, dnn=list('No', "Yes"))
cm
View(prob_pred)
View(classifier)
classifier.variable_importance
classifier.model.variable_importance
prob_pred <- predict(classifier, newdata = as.h2o(test_set[-11]))
View(prob_pred)
View(prob_pred)
prob_pred
prob_pred = predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
cm = table(test_set[,11], y_pred, dnn=list('No', "Yes"))
h2o.shutdown()
