{r install-tidyverse, eval = F}
{r install-tidyverse, eval = F}
install.packages("tidyverse", repos = 'https://cran.us.r-project.org')
{r install-more-packages-2, eval = F}
install.packages(c("XML", "jsonlite", "httr", "rvest"))
setwd("~/Machine Learning /my_scripts/Part 7 - Natural Language Processing")
# Problem: NLL that can detect if review is positive or negative
# NLL
# Importing the dataset
dataset = read.csv('Restaurant_Reviews.tsv', sep="\t")
dataset = read.delim('Restaurant_Reviews.tsv')
# Problem: NLL that can detect if review is positive or negative
# NLL
# Importing the dataset
dataset = read.delim('Restaurant_Reviews.tsv', quote='', stringsAsFactors = FALSE)
# Problem: NLL that can detect if review is positive or negative
# NLL
# Importing the dataset
dataset = read.delim('Restaurant_Reviews.tsv', quote='', stringsAsFactors = FALSE)
# Cleaning the set
install.packages('tm')
library('tm')
corpus = VCorpus(VectorSource(dataset$Review))
library("arules", lib.loc="/usr/local/lib/R/3.5/site-library")
detach("package:arules", unload=TRUE)
View(corpus)
corpus = tm_map(corpus, content_transformer(tolower()))
corpus = tm_map(corpus, content_transformer(tolower)
corpus = VCorpus(VectorSource(dataset$Review))
corpus = VCorpus(VectorSource(dataset$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus[0]
as_charachter(corpus[[1]])
as_character(corpus[[1]])
as.character(corpus[[1]])
as.character(corpus[[2]])
as.character(corpus[[3]])
as.character(corpus[[841]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removeNumbers)
as.character(corpus[[841]])
corpus = tm_map(corpus, removePunctuation)
as.character(corpus[[1]])
corpus = tm_map(corpus, removeWords, stopwords())
as.character(corpus[[1]])
install.packages('SnowballC')
# Importing the dataset
dataset = read.delim('Restaurant_Reviews.tsv', quote='', stringsAsFactors = FALSE)
# Cleaning the set
# install.packages('tm')
install.packages('SnowballC')
library('tm')
library('SnowballC')
corpus = VCorpus(VectorSource(dataset$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
as.character(corpus[[1]])
corpus = tm_map(corpus, stemDocument)
as.character(corpus[[1]])
corpus = tm_map(corpus, stripWhitespace)
as.character(corpus[[841]])
as.character(corpus[[1]])
View(dataset)
View(dataset)
dtm = DocumentTermMatrix(corpus)
View(dtm)
dtm
dtm = removeSparseTerms(dtm, 0.99)
dtm
# Problem: NLL that can detect if review is positive or negative
# NLL
# Importing the dataset
dataset = read.delim('Restaurant_Reviews.tsv', quote='', stringsAsFactors = FALSE)
# Cleaning the set
# install.packages('tm')
# install.packages('SnowballC')
library('tm')
library('SnowballC')
corpus = VCorpus(VectorSource(dataset$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Create the Bag of Words model
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dtm
View(dataset)
View(dtm)
dataset = as.data.frame(as.matrix(dtm))
# Problem: NLL that can detect if review is positive or negative
# NLL
# Importing the dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote='', stringsAsFactors = FALSE)
# Cleaning the set
# install.packages('tm')
# install.packages('SnowballC')
library('tm')
library('SnowballC')
corpus = VCorpus(VectorSource(dataset$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Create the Bag of Words model
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
# Build classification model
dataset = as.data.frame(as.matrix(dtm))
dataset$like = dataset_original$like
# Problem: NLL that can detect if review is positive or negative
# NLL
# Importing the dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote='', stringsAsFactors = FALSE)
# Cleaning the set
# install.packages('tm')
# install.packages('SnowballC')
library('tm')
library('SnowballC')
corpus = VCorpus(VectorSource(dataset$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Create the Bag of Words model
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
# Problem: NLL that can detect if review is positive or negative
# NLL
# Importing the dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote='', stringsAsFactors = FALSE)
# Cleaning the set
# install.packages('tm')
# install.packages('SnowballC')
library('tm')
library('SnowballC')
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Create the Bag of Words model
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
# Build classification model
dataset = as.data.frame(as.matrix(dtm))
dataset$like = dataset_original$like
# Random tree
View(dataset_original)
# Problem: NLL that can detect if review is positive or negative
# NLL
# Importing the dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote='', stringsAsFactors = FALSE)
# Cleaning the set
# install.packages('tm')
# install.packages('SnowballC')
library('tm')
library('SnowballC')
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Create the Bag of Words model
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
# Build classification model
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
training_set[-1]
# Random tree
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting classifier to the Training set
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
cm
82+77/200
# Problem: NLL that can detect if review is positive or negative
# NLL
# Importing the dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote='', stringsAsFactors = FALSE)
# Cleaning the set
# install.packages('tm')
# install.packages('SnowballC')
library('tm')
library('SnowballC')
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Create the Bag of Words model
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
# Build classification model
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Random tree
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting classifier to the Training set
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'RandomForestClassifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
cm
